datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  name     String
  password String
  email    String @unique

  role   Role? @relation(fields: [roleId], references: [id])
  roleId Int

  borrowings Borrowing[]
}


model Book {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  title     String
  author    String
  publisher String
  isbn      String
  shelfLocation     String
  quantity  Int
  price     Float

  category   Category @relation(fields: [categoryId], references: [id])
  categoryId Int

  borrowings Borrowing[]

  // Non-clustering index
  @@index([title], name: "title")
  @@index([author], name: "author")
}

model Borrowing {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  borrowDate DateTime
  returnDate DateTime

  status BorrowingStatus @default(REQUESTED)

  borrower   User @relation(fields: [borrowerId], references: [id])
  borrowerId Int

  book   Book @relation(fields: [bookId], references: [id])
  bookId Int

  // Non-clustering index
  @@index([borrowDate], name: "borrowDate")
  @@index([returnDate], name: "returnDate")
}

// Database noramlization 
model Category {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  name String @unique
  books Book[]
}

model Role {
  id              Int              @id @default(autoincrement())
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @default(now()) @updatedAt
  name            String           @unique
  description     String?
  rolePermissions RolePermission[]
  users           User[]
}

model Permission {
  id              Int              @id @default(autoincrement())
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @default(now()) @updatedAt
  name            String           @unique
  description     String?          @unique
  rolesPermission RolePermission[]
}

model RolePermission {
  id           Int        @id @default(autoincrement())
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @default(now()) @updatedAt
  role         Role       @relation(fields: [roleId], references: [id])
  roleId       Int
  permissionId Int
  permission   Permission @relation(fields: [permissionId], references: [id])
}

enum BorrowingStatus {
  REQUESTED
  BORROWED
  RETURNED
}